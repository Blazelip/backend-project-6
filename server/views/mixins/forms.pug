- const getInputName = (property) => `data[${[property]}]`
- const getInputId = (property) => `data_${property}`
- const inputLabel = (property) => t(`views.form.placeholders.${property}`)

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .form-floating.mb-3(class=(errors[propertyName] && 'has-danger'))
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
      placeholder=inputLabel(propertyName)
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
    label(
      for= inputId
    )= inputLabel(propertyName)

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin textarea(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= inputLabel(propertyName)
    textarea(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)= _.get(entity, propertyName, '')
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, errors = {}, items, isMultiple = false)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= inputLabel(propertyName)
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      multiple= isMultiple
    )&attributes(attributes)
      if isMultiple 
        each item in items
          - isSelected = item.id === entity[propertyName]
          if propertyName === 'statusId'
            option(value= item.id selected= isSelected)= item.title
          else if propertyName === 'executorId'
            option(value= item.id selected= isSelected)= `${item.firstName} ${item.lastName}`
      else
        option
        each item in items
          - isSelected = item.id === entity[propertyName]
          if propertyName === 'statusId'
            option(value= item.id selected= isSelected)= item.title
          else if propertyName === 'executorId'
            option(value= item.id selected= isSelected)= `${item.firstName} ${item.lastName}`
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
